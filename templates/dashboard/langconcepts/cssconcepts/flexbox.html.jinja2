{% from "dashboard/macros/_concept.html.jinja2" import render_concept %}
{# render_concept(concept_header, concept_intro_h2, concept_intro_text, concept_details, lang) #}

{{ render_concept(
        'CSS Flexbox',
        'What is Flexbox?',
        [
            'Flexbox is a layout model that allows items within a container to be aligned and distributed space efficiently.',
            'It provides a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown.',
            'Flexbox is particularly useful for creating responsive layouts.'
        ],
        [
        
        {
                'title': 'Flexbox Basics',
                'purpose': 'Understanding the foundation of CSS Flexbox layout',
                'description': 'Flexbox (Flexible Box Layout) is a CSS layout method that provides an efficient way to arrange, distribute, and align items in a container, even when their size is unknown or dynamic.',
                'demo': {
                    'name': 'Basic Flex Container',
                    'id': 'flexbox-basics-demo',
                    'examples': ['Item 1', 'Item 2', 'Item 3']
                },
                'properties': [
                    {
                        'name': 'Flex Container:',
                        'description': 'The parent element with display: flex'
                    },
                    {
                        'name': 'Flex Items:',
                        'description': 'Direct children of the flex container'
                    },
                    {
                        'name': 'Main Axis:',
                        'description': 'Primary axis along which flex items are laid out'
                    },
                    {
                        'name': 'Cross Axis:',
                        'description': 'Axis perpendicular to the main axis'
                    }
                ]
            },

        {
                'title': 'Flex Direction',
                'purpose': 'Control the direction of flex items',
                'description': 'The <code>flex-direction</code> property defines the main axis and the direction flex items are placed in the container.',
                'demo': {
                    'name': 'Flex Direction Demo',
                    'id': 'directionDemo',
                    'class': 'direction-row',
                    'examples': ['First', 'Second', 'Third', 'Fourth']
                },
                'properties': [
                    {
                        'name': '<code>row</code>',
                        'description': 'The default value. Items are arranged horizontally, left to right.'
                    },
                    {
                        'name': '<code>row-reverse</code>',
                        'description': 'Items are arranged horizontally, but from right to left.'
                    },
                    {
                        'name': '<code>column</code>',
                        'description': 'Items are arranged vertically, from top to bottom.'
                    },
                    {
                        'name': '<code>column-reverse</code>',
                        'description': 'Items are arranged vertically, but from bottom to top'
                    }
                ]
            },

                    {
                'title': 'Justify Content',
                'purpose': 'Align flex items along the main axis',
                'description': 'The <code>justify-content</code> property defines how flex items are aligned along the main axis of the flex container.',
                'demo': {
                    'name': 'Justify Content Demo',
                    'id': 'justifyDemo',
                    'class': 'justify-start',
                    'examples': ['A', 'B', 'C']
                },
                'properties': [
                    {
                        'name': '<code>flex-start</code>',
                        'description': 'Items are packed toward the start of the flex container.'
                    },
                    {
                        'name': '<code>flex-end</code>',
                        'description': 'Items are packed toward the end of the flex container.'
                    },
                    {
                        'name': '<code>center</code>',
                        'description': 'Items are centered along the line.'
                    },
                    {
                        'name': '<code>space-between</code>',
                        'description': 'Items are evenly distributed; first item is on the start line, last item on the end line.'
                    },
                    {
                        'name': '<code>space-around</code>',
                        'description': 'Items are evenly distributed with equal space around them.'
                    }
                ]
            },

        {
            'title': 'Align Items',
            'purpose': 'Align flex items along the cross axis',
            'description': 'The <code>align-items</code> property defines how flex items are aligned along the cross axis of the flex container.',
            'demo': {
                'name': 'Align Items Demo',
                'id': 'alignDemo',
                'class': "align-center",
                'examples': ['Small', 'Large', 'Medium']
            },
            'properties': [
                {
                    'name': '<code>stretch</code> :',
                    'description': 'Items stretch to fill the container (default). '
                },
                {
                    'name': '<code>flex-start</code> :',
                    'description': 'Items are aligned to the start of the cross axis. '
                },
                {
                    'name': '<code>flex-end</code> :',
                    'description': 'Items are aligned to the end of the cross axis.'
                },
                {
                    'name': '<code>center</code> :',
                    'description': 'Items are centered along the cross axis.'
                },
                {
                    'name': '<code>baseline</code> :',
                    'description': 'Items are aligned such that their baselines align.'
                }
            ]
        },

        {
            'title': 'Flex Wrap',
            'purpose': 'Control whether flex items are forced onto one line or can wrap onto multiple lines',
            'description':'The <code>flex-wrap</code> property defines whether flex items should wrap onto multiple lines or stay on a single line.', 
            'demo': {
                'name': 'Flex Wrap Demo',
                'id': 'wrapDemo',
                'class': "wrap-nowrap",
                'examples': ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5', 'Item 6']
            },
            'properties': [
                {
                    'name': '<code>nowrap</code> :',
                    'description': 'Items are forced onto a single line. '
                },
                {
                    'name': '<code>wrap</code> :',
                    'description': 'Items can wrap onto multiple lines. '
                },
                {
                    'name': '<code>wrap-reverse</code> :',
                    'description': 'Items can wrap onto multiple lines, but in reverse order.'
                }
            ]
        },

                    {
                'title': 'Flex Item Properties',
                'purpose': 'Control individual flex item behavior',
                'description': 'Flex item properties allow you to control the size and growth of individual flex items within a flex container.',
                'demo': {
                    'name': ['flex-grow demo', 'flex-basis demo'],
                    'id': ['flex-grow-demo', 'flex-basis-demo'],
                    'class': ['flex-grow-demo', 'flex-basis-demo'],
                    'examples': [
                        ['Normal', 'flex-grow: 1', 'flex-grow: 2', 'Normal'],
                        ['Auto', 'flex-basis: 200px', 'Auto']
                    ]
                },
                'properties': [
                    {
                        'name': '<code>flex-grow</code>',
                        'description': 'Defines the ability for a flex item to grow if necessary.'
                    },
                    {
                        'name': '<code>flex-shrink</code>',
                        'description': 'Defines the ability for a flex item to shrink if necessary.'
                    },
                    {
                        'name': '<code>flex-basis</code>',
                        'description': 'Defines the default size of an element before the remaining space is distributed.'
                    }
                ]
            },

        {
            'title': 'Flex Basis',
            'purpose': 'Control the initial size of flex items',
            'description': 'The <code>flex-basis</code> property defines the default size of an element before the remaining space is distributed.',
            'demo': {
                'name': 'Flex Basis Demo',
                'id': 'flex-basis-demo',
                'class': 'flex-basis-demo',
                'examples': ['Item A', 'Item B', 'Item C']
            },
            'properties': [
                {
                    'name': '<code>auto</code> :',
                    'description': 'The default size is based on the content size. '
                },
                {
                    'name': '<code>50%</code> :',
                    'description': 'The item takes up 50% of the container width. '
                },
                {
                    'name': '<code>100px</code> :',
                    'description': 'The item has a fixed size of 100 pixels.'
                }
            ]
        },

        ],
        lang
        
    ) }}

    {# lang is passed to the render_concept macro from the dashboard.html.jinja2 template #}